# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""SDMX Models

Revision ID: 0f54d6e0d462
Revises: 48cbb571fa3a
Create Date: 2024-12-21 14:08:56.559662

"""

# revision identifiers, used by Alembic.
revision = '0f54d6e0d462'
down_revision = '48cbb571fa3a'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('ab_view_menu', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=250),
               existing_nullable=False)
    op.alter_column('annotation', 'layer_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('dashboard_roles', 'dashboard_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('dbs', 'allow_file_upload',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('dynamic_plugin', 'name',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('dynamic_plugin', 'key',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('dynamic_plugin', 'bundle_url',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.Text(),
               existing_nullable=False)
    op.create_unique_constraint(None, 'dynamic_plugin', ['bundle_url'])
    op.alter_column('embedded_dashboards', 'uuid',
               existing_type=postgresql.UUID(),
               nullable=False)
    op.create_foreign_key(None, 'embedded_dashboards', 'ab_user', ['changed_by_fk'], ['id'])
    op.create_foreign_key(None, 'embedded_dashboards', 'ab_user', ['created_by_fk'], ['id'])
    op.drop_index('ix_key_value_expires_on', table_name='key_value')
    op.drop_index('ix_key_value_uuid', table_name='key_value')
    op.create_unique_constraint(None, 'key_value', ['uuid'])
    op.drop_index('ix_logs_user_id_dttm', table_name='logs')
    op.alter_column('query', 'limiting_factor',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Enum('QUERY', 'DROPDOWN', 'QUERY_AND_DROPDOWN', 'NOT_LIMITED', 'UNKNOWN', name='limitingfactor'),
               existing_nullable=True,
               existing_server_default=sa.text("'UNKNOWN'::character varying"))
    op.drop_index('ix_sql_editor_id', table_name='query')
    op.create_index(op.f('ix_query_sql_editor_id'), 'query', ['sql_editor_id'], unique=False)
    op.alter_column('report_schedule', 'extra_json',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_index('ix_creation_method', table_name='report_schedule')
    op.create_unique_constraint(None, 'report_schedule_user', ['user_id', 'report_schedule_id'])
    op.alter_column('row_level_security_filters', 'filter_type',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.Enum('Regular', 'Base', name='filter_type_enum'),
               existing_nullable=True)
    op.drop_index('ix_row_level_security_filters_filter_type', table_name='row_level_security_filters')
    op.alter_column('slices', 'perm',
               existing_type=sa.VARCHAR(length=2000),
               type_=sa.String(length=1000),
               existing_nullable=True)
    op.alter_column('ssh_tunnels', 'database_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('ssh_tunnels', 'server_address',
               existing_type=sa.VARCHAR(length=256),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index('ix_ssh_tunnels_database_id', table_name='ssh_tunnels')
    op.drop_index('ix_ssh_tunnels_uuid', table_name='ssh_tunnels')
    op.create_unique_constraint(None, 'ssh_tunnels', ['database_id'])
    op.create_unique_constraint(None, 'ssh_tunnels', ['uuid'])
    op.create_foreign_key(None, 'ssh_tunnels', 'ab_user', ['created_by_fk'], ['id'])
    op.create_foreign_key(None, 'ssh_tunnels', 'ab_user', ['changed_by_fk'], ['id'])
    op.alter_column('tab_state', 'latest_query_id',
               existing_type=sa.VARCHAR(length=11),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('tab_state', 'autorun',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('tab_state', 'hide_left_bar',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.drop_index('ix_tab_state_id', table_name='tab_state')
    op.drop_index('ix_table_schema_id', table_name='table_schema')
    op.add_column('tables', sa.Column('is_sdmx', sa.Boolean(), nullable=True))
    op.add_column('tables', sa.Column('sdmx_url', sa.String(length=1024), nullable=True))
    op.add_column('tables', sa.Column('sdmx_uuid', sa.String(length=256), nullable=True))
    op.alter_column('tables', 'params',
               existing_type=sa.TEXT(),
               type_=sa.String(length=1000),
               existing_nullable=True)
    op.drop_constraint('_customer_location_uc', 'tables', type_='unique')
    op.create_unique_constraint(None, 'tables', ['database_id', 'catalog', 'schema', 'table_name'])
    op.alter_column('tag', 'type',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('custom', 'type', 'owner', 'favorited_by', name='tagtype'),
               existing_nullable=True)
    op.alter_column('tagged_object', 'object_type',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('query', 'chart', 'dashboard', 'dataset', name='objecttype'),
               existing_nullable=True)
    op.drop_index('ix_tagged_object_object_id', table_name='tagged_object')
    op.create_foreign_key(None, 'tagged_object', 'dashboards', ['object_id'], ['id'])
    op.create_foreign_key(None, 'tagged_object', 'slices', ['object_id'], ['id'])
    op.create_foreign_key(None, 'tagged_object', 'saved_query', ['object_id'], ['id'])
    op.alter_column('user_favorite_tag', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user_favorite_tag', 'tag_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user_favorite_tag', 'tag_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_favorite_tag', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint(None, 'tagged_object', type_='foreignkey')
    op.drop_constraint(None, 'tagged_object', type_='foreignkey')
    op.drop_constraint(None, 'tagged_object', type_='foreignkey')
    op.create_index('ix_tagged_object_object_id', 'tagged_object', ['object_id'], unique=False)
    op.alter_column('tagged_object', 'object_type',
               existing_type=sa.Enum('query', 'chart', 'dashboard', 'dataset', name='objecttype'),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('tag', 'type',
               existing_type=sa.Enum('custom', 'type', 'owner', 'favorited_by', name='tagtype'),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_constraint(None, 'tables', type_='unique')
    op.create_unique_constraint('_customer_location_uc', 'tables', ['database_id', 'schema', 'table_name'])
    op.alter_column('tables', 'params',
               existing_type=sa.String(length=1000),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('tables', 'sdmx_uuid')
    op.drop_column('tables', 'sdmx_url')
    op.drop_column('tables', 'is_sdmx')
    op.create_index('ix_table_schema_id', 'table_schema', ['id'], unique=True)
    op.create_index('ix_tab_state_id', 'tab_state', ['id'], unique=True)
    op.alter_column('tab_state', 'hide_left_bar',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('tab_state', 'autorun',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('tab_state', 'latest_query_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=11),
               existing_nullable=True)
    op.drop_constraint(None, 'ssh_tunnels', type_='foreignkey')
    op.drop_constraint(None, 'ssh_tunnels', type_='foreignkey')
    op.drop_constraint(None, 'ssh_tunnels', type_='unique')
    op.drop_constraint(None, 'ssh_tunnels', type_='unique')
    op.create_index('ix_ssh_tunnels_uuid', 'ssh_tunnels', ['uuid'], unique=True)
    op.create_index('ix_ssh_tunnels_database_id', 'ssh_tunnels', ['database_id'], unique=True)
    op.alter_column('ssh_tunnels', 'server_address',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=256),
               existing_nullable=True)
    op.alter_column('ssh_tunnels', 'database_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('slices', 'perm',
               existing_type=sa.String(length=1000),
               type_=sa.VARCHAR(length=2000),
               existing_nullable=True)
    op.create_index('ix_row_level_security_filters_filter_type', 'row_level_security_filters', ['filter_type'], unique=False)
    op.alter_column('row_level_security_filters', 'filter_type',
               existing_type=sa.Enum('Regular', 'Base', name='filter_type_enum'),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.drop_constraint(None, 'report_schedule_user', type_='unique')
    op.create_index('ix_creation_method', 'report_schedule', ['creation_method'], unique=False)
    op.alter_column('report_schedule', 'extra_json',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_index(op.f('ix_query_sql_editor_id'), table_name='query')
    op.create_index('ix_sql_editor_id', 'query', ['sql_editor_id'], unique=False)
    op.alter_column('query', 'limiting_factor',
               existing_type=sa.Enum('QUERY', 'DROPDOWN', 'QUERY_AND_DROPDOWN', 'NOT_LIMITED', 'UNKNOWN', name='limitingfactor'),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True,
               existing_server_default=sa.text("'UNKNOWN'::character varying"))
    op.create_index('ix_logs_user_id_dttm', 'logs', ['user_id', 'dttm'], unique=False)
    op.drop_constraint(None, 'key_value', type_='unique')
    op.create_index('ix_key_value_uuid', 'key_value', ['uuid'], unique=True)
    op.create_index('ix_key_value_expires_on', 'key_value', ['expires_on'], unique=False)
    op.drop_constraint(None, 'embedded_dashboards', type_='foreignkey')
    op.drop_constraint(None, 'embedded_dashboards', type_='foreignkey')
    op.alter_column('embedded_dashboards', 'uuid',
               existing_type=postgresql.UUID(),
               nullable=True)
    op.drop_constraint(None, 'dynamic_plugin', type_='unique')
    op.alter_column('dynamic_plugin', 'bundle_url',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=False)
    op.alter_column('dynamic_plugin', 'key',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('dynamic_plugin', 'name',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('dbs', 'allow_file_upload',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('dashboard_roles', 'dashboard_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('annotation', 'layer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('ab_view_menu', 'name',
               existing_type=sa.String(length=250),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    # ### end Alembic commands ###
